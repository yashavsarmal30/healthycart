DBMS QUERIES
Q8)
### Step 1: Create the employee table
sql
CREATE TABLE employee (
    empno INT PRIMARY KEY,
    ename VARCHAR(50),
    job VARCHAR(50),
    mgr INT,
    doj DATE,
    salary DECIMAL(10, 2),
    commission DECIMAL(10, 2),
    deptno INT
);


### Step 2: Insert sample data
sql
INSERT INTO employee (empno, ename, job, mgr, doj, salary, commission, deptno)
VALUES
(1, 'Alice', 'Manager', NULL, '2015-01-01', 60000, 5000, 10),
(2, 'Bob', 'Analyst', 1, '2018-03-15', 55000, NULL, 10),
(3, 'Chris', 'Salesman', 1, '2020-06-10', 30000, 2000, 20),
(4, 'David', 'Clerk', 2, '2019-09-01', 15000, NULL, 20),
(5, 'Eve', 'Analyst', 2, '2017-11-25', 70000, 1000, 10);


### Step 3: Queries for each task

1. *Select all columns from the employee table:*
   sql
   SELECT * FROM employee;
   

2. *Select specific columns from the employee table:*
   sql
   SELECT empno, ename, salary FROM employee;
   

3. *List the name of employees starting with the letter "A":*
   sql
   SELECT ename FROM employee WHERE ename LIKE 'A%';
   

4. *Select different jobs for the employees:*
   sql
   SELECT DISTINCT job FROM employee;
   

5. *Select Salary of employee under the heading 'emp_sal':*
   sql
   SELECT salary AS emp_sal FROM employee;
   

6. *Select all details of employees whose salary is greater than 50000:*
   sql
   SELECT * FROM employee WHERE salary > 50000;
   

7. *Select name of employees who are working as Analysts:*
   sql
   SELECT ename FROM employee WHERE job = 'Analyst';
   

8. *Select employee names, deptno, and salary for those working in deptno 1 with salary greater than 5000:*
   sql
   SELECT ename, deptno, salary FROM employee WHERE deptno = 1 AND salary > 5000;
   

9. *List the employees whose salary is between 10000 and 13000:*
   sql
   SELECT ename, salary FROM employee WHERE salary BETWEEN 10000 AND 13000;
   

10. *List the employees whose names end with an 'a':*
    sql
    SELECT ename FROM employee WHERE ename LIKE '%a';
    

11. *List the names of employees whose names have exactly 5 characters:*
    sql
    SELECT ename FROM employee WHERE LENGTH(ename) = 5;
    

12. **List the names of employees whose employee number is 1, 2, 3 using IN operator:**
    sql
    SELECT ename FROM employee WHERE empno IN (1, 2, 3);
    

13. **List the names of employees whose commission is NULL:**
    sql
    SELECT ename FROM employee WHERE commission IS NULL;
    

14. *Display total, average, minimum, maximum, and number of employees:*
    sql
    SELECT 
      COUNT(*) AS total_employees,
      AVG(salary) AS avg_salary,
      MIN(salary) AS min_salary,
      MAX(salary) AS max_salary
    FROM employee;
    

15. *Display details of employees in ascending order of salary:*
    sql
    SELECT * FROM employee ORDER BY salary ASC;
    

16. *Display total salary by grouping jobs:*
    sql
    SELECT job, SUM(salary) AS total_salary FROM employee GROUP BY job;
    

17. *Display total salary by grouping jobs where total salary is greater than 0:*
    sql
    SELECT job, SUM(salary) AS total_salary FROM employee GROUP BY job HAVING SUM(salary) > 0;
    

18. *Display details of employees in descending order of salary:*
    sql
    SELECT * FROM employee ORDER BY salary DESC;
    

19. *List the employees whose names have 'a' as the second character:*
    sql
    SELECT ename FROM employee WHERE ename LIKE '_a%';
    

20. *List the maximum salary of an employee working as a salesman:*
    sql
    SELECT MAX(salary) AS max_salary FROM employee WHERE job = 'Salesman';
    
Q 1------------------------7-------------------------------------------------------------------------------------------

### Q.1 Execute DDL Commands

*DDL Commands* include: CREATE, ALTER, RENAME, TRUNCATE, DROP.

1. *Create a table:*
   sql
   CREATE TABLE student (
       id INT PRIMARY KEY,
       name VARCHAR(50),
       age INT
   );
   

2. *Alter table (add a column):*
   sql
   ALTER TABLE student ADD email VARCHAR(100);
   

3. *Alter table (modify a column):*
   sql
   ALTER TABLE student MODIFY age INT NOT NULL;
   

4. *Rename a table:*
   sql
   RENAME TABLE student TO students;
   

5. *Truncate a table (remove all records but keep structure):*
   sql
   TRUNCATE TABLE students;
   

6. *Drop a table:*
   sql
   DROP TABLE students;
   

### Q.2 Execute DML Commands

*DML Commands* include: INSERT, DELETE, UPDATE, SELECT.

1. *Insert data into the table:*
   sql
   INSERT INTO student (id, name, age) VALUES (1, 'Alice', 20);
   

2. *Delete data from the table:*
   sql
   DELETE FROM student WHERE id = 1;
   

3. *Update data in the table:*
   sql
   UPDATE student SET name = 'Bob', age = 22 WHERE id = 1;
   

4. *Select data from the table:*
   sql
   SELECT * FROM student;
   

### Q.3 Execute TCL Commands

*TCL Commands* include: COMMIT, ROLLBACK, SAVEPOINT.

1. *Commit transaction:*
   sql
   COMMIT;
   

2. *Savepoint in a transaction:*
   sql
   SAVEPOINT sp1;
   

3. *Rollback to a savepoint:*
   sql
   ROLLBACK TO sp1;
   

### Q.4 Implementation of Views and Triggers

1. *Create a view:*
   sql
   CREATE VIEW student_view AS
   SELECT name, age FROM student;
   

2. *Create a trigger (before insert):*
   sql
   CREATE TRIGGER before_student_insert
   BEFORE INSERT ON student
   FOR EACH ROW
   BEGIN
       IF NEW.age < 18 THEN
           SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Age must be 18 or above';
       END IF;
   END;
   

### Q.5 Implement Functions and Procedures

1. *Function to return average age:*
   sql
   CREATE FUNCTION avg_age() RETURNS DECIMAL(5,2)
   BEGIN
       DECLARE average_age DECIMAL(5,2);
       SELECT AVG(age) INTO average_age FROM student;
       RETURN average_age;
   END;
   

2. *Stored procedure to update age:*
   sql
   CREATE PROCEDURE update_age(IN student_id INT, IN new_age INT)
   BEGIN
       UPDATE student SET age = new_age WHERE id = student_id;
   END;
   

### Q.6 Create Table with Integrity Constraints

sql
CREATE TABLE student (
    id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    age INT DEFAULT 18 CHECK (age >= 18),
    email VARCHAR(100) UNIQUE
);


### Q.7 Implement Joins in SQL

1. *Inner Join:*
   sql
   SELECT s.name, c.course_name 
   FROM student s
   INNER JOIN course c ON s.id = c.student_id;
   

2. *Left Join:*
   sql
   SELECT s.name, c.course_name 
   FROM student s
   LEFT JOIN course c ON s.id = c.student_id;
   

3. *Right Join:*
   sql
   SELECT s.name, c.course_name 
   FROM student s
   RIGHT JOIN course c ON s.id = c.student_id;
   

4. *Full Outer Join (if supported):*
   ```sql
   SELECT s.name, c.course_name 
   FROM student s
   FULL OUTER JOIN course c ON s.id = c.student_id;
   ``
